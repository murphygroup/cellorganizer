function patterns = getBNGRegexps()
%GETBNGREGEXPS Produces regular expression based on BioNetGen grammars.
%
% Inputs
% ------
% 
% Outputs
% -------
% patterns = struct containing named regular expressions


% Copyright (C) 2018 Taraz Buck
% Copyright (C) 2019 Murphy Lab
% Lane Center for Computational Biology
% School of Computer Science
% Carnegie Mellon University
% 
% This program is free software; you can redistribute it and/or
% modify it under the terms of the GNU General Public License
% as published by the Free Software Foundation; either version 2
% of the License, or (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.


debug = false;
% debug = true;

if ~debug
    warning('off', 'CellOrganizer:getBNGRegexps');
end

if nargin < 1
    exact = false;
end


% https://github.com/RuleWorld/bionetgen/blob/master/parsers/BNGParser/src/bngparser/grammars/BNGLexer.g
% lb = '(?:[\n\r]+)';
lb = '(?:(?:\r?\n)+)';
ws = '(?:[ \t]+)';
net_begin = '(?:begin)';
net_end = '(?:end)';
net_seed = '(?:seed)';
net_species = '(?:[Ss]pecies)';
string_pattern = '(?:[a-zA-Z_][a-zA-Z0-9_]*)';
int_pattern = '(?:[0-9]+)';

% TODO: Edit this to match BNG grammar
% float_pattern = ['(?:[\-\+]?(?:(?:(?:[0-9]+|[0-9]+\.[0-9]*|[0-9]*\.[0-9]+)(?:[eE][\-\+]?[0-9]+)?)|[iI][nN][fF]|[nN][aA][nN]))'];
% float_pattern = ['(?:[\-\+]?(?:(?:(?:(?<!\.)[0-9][0-9]*(?![0-9.])|[0-9]+\.[0-9]*(?![0-9])|(?<![0-9])[0-9]*\.[0-9]+)(?:[eE][\-\+]?[0-9]+)?)|[iI][nN][fF]|[nN][aA][nN]))'];
float_pattern = ['(?:[\-\+]?(?:(?:(?:(?<![0-9.])[0-9][0-9]*(?![0-9.])|[0-9]+\.[0-9]*(?![0-9])|(?<![0-9])[0-9]*\.[0-9]+)(?:[eE][\-\+]?[0-9]+)?)|[iI][nN][fF]|[nN][aA][nN]))'];
% Test: regexp('5 5. .5 0.5 15 15. .15 15.15 -5 -5. -.5 -0.5 -15 -15. -.15 -15.15 5e3 5.e3 .5e3 0.5e3 15e3 15.e3 .15e3 15.15e3 +5e-3 +5.e-3 +.5e-3 +0.5e-3 +15e-3 +15.e-3 +.15e-3 +15.15e-3 inf Inf INF nan NaN NAN', '(?:[\-\+]?(?:(?:(?:(?<![0-9.])[0-9][0-9]*(?![0-9.])|[0-9]+\.[0-9]*(?![0-9])|(?<![0-9])[0-9]*\.[0-9]+)(?:[eE][\-\+]?[0-9]+)?)|[iI][nN][fF]|[nN][aA][nN]))', 'match')
warning('CellOrganizer:getBNGRegexps', 'Regular expression ''float_pattern'' is not based on BioNetGen grammar')

% https://github.com/RuleWorld/bionetgen/blob/master/parsers/BNGParser/src/bngparser/grammars/BNGGrammar_MoleculeDef.g
state_label = ['(?:(?:' string_pattern '|' int_pattern '|\?)+)'];
site_def = ['(?:' string_pattern '(?:~' state_label ')*)'];


% Approximate regular expressions that work for now

net_expression = ['(?:(?:' float_pattern '|' string_pattern '|[+\-.*/\^&|=<>\(\)])+)'];
net_label = ['(?:%(?:' string_pattern '|' int_pattern '))'];

net_observables_type = string_pattern;
net_observables_name = string_pattern;
net_species_element_site = ['(?:' string_pattern '(?:[!+~0-9]*|' string_pattern ')*)'];
% https://github.com/RuleWorld/bionetgen/blob/master/parsers/BNGParser/src/bngparser/grammars/BNGGrammar_MoleculeDef.g
net_state_label = ['(?:' ...
    '(?:' ...
        string_pattern ...
        '|' ...
        int_pattern ...
        '|' ...
        '\?' ...
    ')+' ...
    ')'];
% https://github.com/RuleWorld/bionetgen/blob/master/parsers/BNGParser/src/bngparser/grammars/BNGGrammar_SeedSpecies.g
net_site_obs_state = ['(?:' ...
    '~' net_state_label ...
    ')'];
net_bond_name = ['(?:' ...
    int_pattern ...
    '|' ...
    string_pattern ...
    ')'];
net_site_obs_site = ['(?:' ...
    '(?:' ...
        '!' ...
        '(?:' ...
            '\+' ...
            '|' ...
            '\?' ...
            '|' ...
            net_bond_name ...
        ')' ...
    ')+' ...
    ')'];
% This allows any combination of site, state, and label of length zero to three unlike the BNGL grammar
net_site_obs = ['(?:' ...
    string_pattern ...
    '(?:' ...
        net_site_obs_site ...
        '|' ...
        net_site_obs_state ...
        '|' ...
        net_label ...
    '){0,3}' ...
    ')'];
net_site_list = ['(?:' ...
    net_site_obs ...
    '(?:,' net_site_obs ')*' ...
    ')'];
net_compartment_allocation = ['(?:' ...
    '@' string_pattern ...
    ')'];
% Note that net_site_list is not optional in what looks like the reference pattern in BioNetGen, but "journal.pcbi.1004611.s003.bngl" contains "$Sink()", which does not produce errors when read into "BNG2.pl"
net_species_postModification = ['(?:' ...
    net_label ...
    '|' ...
    '\(' net_site_list '?\)' ...
    '|' ...
    net_compartment_allocation ...
    ')'];
net_species_element = ['(?:' ...
    string_pattern ...
    '(?:' ...
        net_species_postModification ...
    ')*' ...
    ')'];
net_species_def2 = ['(?:' ...
    '(?:@' string_pattern '\:\:?)?' ...
    '(?:%' string_pattern '\:\:?)?' ...
    '\$?' ...
    net_species_element ...
    '(?:\.' net_species_element ')*' ...
    ')'];
net_pre_species_def = net_species_def2;
net_seed_species_def = ['(?:' ...
    '(?:' string_pattern '\:)?' ...
    net_pre_species_def ...
    ws ...
    net_expression ...
    ')'];
%{
net_seed_species_block = ['(?:' ...
    net_begin '(?:' net_seed '\:)?' net_species lb ...
    '(?:' ...
    net_seed_species_def lb ...
    '\:)*' ...
    net_end '(?:' net_seed '\:)?' net_species lb ...
    ')'];
%}
net_seed_species_block_begin = ['(?:' ...
    net_begin '(?:' net_seed '\:)?' net_species ...
    ')'];
net_seed_species_block_end = ['(?:' ...
    net_end '(?:' net_seed '\:)?' net_species ...
    ')'];
net_seed_species_block_entry = net_seed_species_def;
net_species_def = ['(?:' ...
    '(?:@' string_pattern '\:\:?)?' ...
    '(?:%' string_pattern '\:\:?)?' ...
    net_species_element ...
    '(?:\.' net_species_element ')*' ...
    ')'];
net_rule_species_def = ['(?:' net_species_def '|' int_pattern ')'];
net_rule_species_def_list = ['(?:' net_rule_species_def '(?: \+ ' net_rule_species_def ')*)'];

% net_parameter_name = ['(?:(?:' int_pattern ')??(?:' string_pattern '\:)?' string_pattern '=?' ')'];
net_parameter_name = string_pattern;
net_parameter_value = net_expression;

net_compartment_name = string_pattern;
net_compartment_size = net_expression;

net_molecule_type = ['(?:' string_pattern '(?:\((?:(?:' site_def '(?:,' site_def ')*)?|)\)))'];

net_observables_pattern_list = ['(?:' net_species_def '(?:,' net_species_def ')*)'];

net_species_pattern = ['(?:' net_species_def ')'];
net_species_concentration = ['(?:' net_expression ')'];
net_species_count = ['(?:' net_expression ')'];


net_reaction_rules_name = ['(?:' string_pattern ':)'];
net_reaction_rules_rule = ['(?:' net_rule_species_def_list ' <?-> ' net_rule_species_def_list ')'];
net_reaction_rules_rate_constant = ['(?:' net_expression '(?:, ' net_expression ')?)'];

net_reaction_index = int_pattern;
net_reaction_reactant_indices = ['(?:' int_pattern '(?:,' int_pattern ')*)'];
net_reaction_product_indices = net_reaction_reactant_indices;
net_reaction_rate_constant = net_expression;
net_reaction_comment_unit_conversion = ['(?:unit_conversion=(?:' net_expression '))'];


patterns = struct();
patterns.string_pattern = string_pattern;
patterns.int_pattern = int_pattern;
patterns.float_pattern = float_pattern;
patterns.net_expression = net_expression;
patterns.net_parameter_name = net_parameter_name;
patterns.net_parameter_value = net_parameter_value;
patterns.net_compartment_name = net_compartment_name;
patterns.net_compartment_size = net_compartment_size;
patterns.net_molecule_type = net_molecule_type;
patterns.net_observables_pattern_list = net_observables_pattern_list;
patterns.net_species_pattern = net_species_pattern;
patterns.net_species_concentration = net_species_concentration;
patterns.net_species_count = net_species_count;
patterns.net_reaction_rules_name = net_reaction_rules_name;
patterns.net_reaction_rules_rule = net_reaction_rules_rule;
patterns.net_reaction_rules_rate_constant = net_reaction_rules_rate_constant;
patterns.net_reaction_index = net_reaction_index;
patterns.net_reaction_reactant_indices = net_reaction_reactant_indices;
patterns.net_reaction_product_indices = net_reaction_product_indices;
patterns.net_reaction_rate_constant = net_reaction_rate_constant;

% patterns.net_observables_type = net_observables_type;
% patterns.net_observables_name = net_observables_name;
% patterns.net_species_element_site = net_species_element_site;
% patterns.net_state_label = net_state_label;
% patterns.net_site_obs_state = net_site_obs_state;
% patterns.net_bond_name = net_bond_name;
% patterns.net_site_obs_site = net_site_obs_site;
% patterns.net_site_obs = net_site_obs;
% patterns.net_site_list = net_site_list;
% patterns.net_compartment_allocation = net_compartment_allocation;
% patterns.net_species_postModification = net_species_postModification;
% patterns.net_species_element = net_species_element;
% patterns.net_species_def2 = net_species_def2;
patterns.net_pre_species_def = net_pre_species_def;
% patterns.net_seed_species_def = net_seed_species_def;
% patterns.net_seed_species_block_begin = net_seed_species_block_begin;
% patterns.net_seed_species_block_end = net_seed_species_block_end;
% patterns.net_seed_species_block_entry = net_seed_species_block_entry;
% patterns.net_species_def = net_species_def;
% patterns.net_rule_species_def = net_rule_species_def;
% patterns.net_rule_species_def_list = net_rule_species_def_list;



end